"""
Handlers para mensagens de voz do bot Telegram.
"""
import logging
import os
import tempfile
from typing import Optional

from telegram import Update, ParseMode
from telegram.ext import CallbackContext

from src.bot.bot_utils import check_authorization
from src.transcription.transcriber import audio_transcriber

logger = logging.getLogger(__name__)

def handle_voice_message(update: Update, context: CallbackContext) -> None:
    """
    Processa uma mensagem de voz (√°udio).
    
    Args:
        update: Objeto Update do Telegram
        context: Contexto do callback
    """
    if not check_authorization(update):
        update.message.reply_text("Voc√™ n√£o est√° autorizado a usar este bot.")
        return
    
    # Verifica se h√° uma mensagem de voz
    if not update.message.voice:
        update.message.reply_text("N√£o consegui encontrar o √°udio na sua mensagem.")
        return
    
    # Envia mensagem de processamento
    processing_message = update.message.reply_text("üéôÔ∏è Processando seu √°udio... Isso pode levar alguns segundos.")
    
    try:
        # Obt√©m o arquivo de √°udio
        voice = update.message.voice
        voice_file = context.bot.get_file(voice.file_id)
        
        # Cria um diret√≥rio tempor√°rio para o arquivo de √°udio
        with tempfile.TemporaryDirectory() as temp_dir:
            # Define o caminho para o arquivo de √°udio
            audio_path = os.path.join(temp_dir, f"audio_{voice.file_id}.ogg")
            
            # Baixa o arquivo de √°udio
            voice_file.download(audio_path)
            
            # Verifica se o arquivo existe
            if not os.path.exists(audio_path):
                update.message.reply_text("‚ùå Erro ao baixar o arquivo de √°udio. Por favor, tente novamente.")
                return
            
            # Transcreve o √°udio
            processing_message.edit_text("üîç Transcrevendo √°udio... Isso pode levar alguns segundos.")
            sucesso, transcricao = audio_transcriber.transcrever_audio(audio_path)
            
            if not sucesso:
                update.message.reply_text(
                    f"‚ùå Erro ao transcrever o √°udio: {transcricao}\n\n"
                    "Por favor, tente novamente ou envie uma mensagem de texto."
                )
                return
            
            # Processa a transcri√ß√£o como uma mensagem de texto
            processing_message.edit_text("‚úÖ √Åudio transcrito com sucesso! Processando sua ideia...")
            
            # Envia a transcri√ß√£o para o usu√°rio
            update.message.reply_text(
                f"üéôÔ∏è *Transcri√ß√£o do seu √°udio:*\n\n{transcricao}",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # Processa a mensagem transcrita
            from src.bot.message_handlers import process_message
            process_message(update, context, transcricao)
    
    except Exception as e:
        logger.error(f"Erro ao processar mensagem de voz: {str(e)}", exc_info=True)
        update.message.reply_text(
            f"‚ùå Ocorreu um erro ao processar seu √°udio: {str(e)}\n\n"
            "Por favor, tente novamente ou envie uma mensagem de texto."
        )
